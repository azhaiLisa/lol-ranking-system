import torch
from transformers import GPTNeoXForCausalLM, PreTrainedTokenizerFast
import re

# Paths
MODEL_PATH = "../model/lol-model-neox"
TOKENIZER_PATH = "../model/my_tokenizer"
OUTPUT_FILE = "generated_matches.txt"

# Prompts
PROMPTS = [
    "[RANK_DIAMOND] [GAME_START] [FRAME] [ITEM_BUY][P0][WORLD_ATLAS] [ITEM_BUY][P0][WORLD_ATLAS] [FRAME] [ITEM_BUY][MIDDLE_B][DORANS_RING] [ITEM_BUY][MIDDLE_B][HEALTH_POTION] [ITEM_BUY][MIDDLE_B][HEALTH_POTION] [ITEM_BUY][MIDDLE_B][STEALTH_WARD] [ITEM_BUY][UTILITY_B][HEALTH_POTION] [ITEM_BUY][UTILITY_B][STEALTH_WARD] [ITEM_BUY][JUNGLE_B][SCORCHCLAW_PUP] [ITEM_BUY][UTILITY_B][HEALTH_POTION] [ITEM_BUY][JUNGLE_B][ORACLE_LENS] [SKILL_UP][JUNGLE_B][SKILL_Q] [ITEM_BUY][UTILITY_R][CONTROL_WARD] [ITEM_BUY][TOP_R][DARK_SEAL] [ITEM_BUY][TOP_R][REFILLABLE_POTION] [ITEM_BUY][TOP_R][STEALTH_WARD] [ITEM_BUY][TOP_B][DORANS_SHIELD] [ITEM_BUY][TOP_B][HEALTH_POTION] [ITEM_BUY][TOP_B][STEALTH_WARD] [ITEM_BUY][BOTTOM_B][DORANS_BLADE] [ITEM_BUY][BOTTOM_B][STEALTH_WARD] [ITEM_BUY][BOTTOM_B][HEALTH_POTION] [ITEM_BUY][BOTTOM_R][DORANS_BLADE] [ITEM_BUY][BOTTOM_R][HEALTH_POTION] [ITEM_BUY][MIDDLE_R][DORANS_RING] [ITEM_BUY][MIDDLE_R][HEALTH_POTION] [ITEM_BUY][JUNGLE_R][MOSSTOMPER_SEEDLING] [ITEM_BUY][MIDDLE_R][HEALTH_POTION] [ITEM_BUY][JUNGLE_R][STEALTH_WARD] [SKILL_UP][TOP_B][SKILL_Q] [SKILL_UP][UTILITY_B][SKILL_Q] [SKILL_UP][UTILITY_R][SKILL_W] [SKILL_UP][BOTTOM_B][SKILL_Q] [SKILL_UP][MIDDLE_B][SKILL_Q] [WARD_PLACE][PNone][YELLOW] [WARD_PLACE][PNone][YELLOW] [FRAME] [SKILL_UP][JUNGLE_R][SKILL_W] [WARD_PLACE][PNone][YELLOW] [SKILL_UP][MIDDLE_R][SKILL_Q] [SKILL_UP][BOTTOM_R][SKILL_Q] [ITEM_USE][UTILITY_R][CONTROL_WARD] [WARD_PLACE][PNone][CONTROL] [WARD_PLACE][PNone][YELLOW] [WARD_KILL][BOTTOM_B][CONTROL] [SKILL_UP][TOP_R][SKILL_Q] [LEVEL_UP][JUNGLE_R][2] [LEVEL_UP][JUNGLE_B][2] [SKILL_UP][JUNGLE_R][SKILL_E] [SKILL_UP][JUNGLE_B][SKILL_W] [WARD_PLACE][PNone][YELLOW] [ITEM_USE][UTILITY_B][HEALTH_POTION] [WARD_PLACE][PNone][YELLOW] [ITEM_USE][UTILITY_B][HEALTH_POTION] [ITEM_USE][BOTTOM_R][HEALTH_POTION] [FRAME] [LEVEL_UP][MIDDLE_R][2] [SKILL_UP][MIDDLE_R][SKILL_W] [LEVEL_UP][MIDDLE_B][2] [LEVEL_UP][TOP_R][2] [LEVEL_UP][TOP_B][2] [LEVEL_UP][UTILITY_B][2] [LEVEL_UP][BOTTOM_B][2] [SKILL_UP][UTILITY_B][SKILL_E] [SKILL_UP][TOP_R][SKILL_W] [SKILL_UP][TOP_B][SKILL_E] [WARD_PLACE][PNone][YELLOW] [SKILL_UP][MIDDLE_B][SKILL_W] [LEVEL_UP][JUNGLE_B][3] [SKILL_UP][JUNGLE_B][SKILL_Q] [KILL][BOTTOM_B][BOTTOM_R] [ASSIST] [UTILITY_B] [BOUNTY][300] [SPECIAL_KILL_FIRST_BLOOD][BOTTOM_B] [ITEM_BUY][BOTTOM_R][REFILLABLE_POTION] [LEVEL_UP][JUNGLE_R][3] [LEVEL_UP][UTILITY_R][2] [SKILL_UP][UTILITY_R][SKILL_E] [SKILL_UP][JUNGLE_R][SKILL_Q] [LEVEL_UP][MIDDLE_B][3] [SKILL_UP][MIDDLE_B][SKILL_E] [LEVEL_UP][MIDDLE_R][3] [SKILL_UP][MIDDLE_R][SKILL_E] [LEVEL_UP][TOP_R][3] [SKILL_UP][TOP_R][SKILL_E] [LEVEL_UP][TOP_B][3] [ITEM_USE][MIDDLE_R][HEALTH_POTION] [ITEM_BUY][UTILITY_B][DARK_SEAL] [SKILL_UP][TOP_B][SKILL_W] [LEVEL_UP][UTILITY_R][3] [ITEM_BUY][BOTTOM_B][LONG_SWORD] [ITEM_BUY][BOTTOM_B][LONG_SWORD] [SKILL_UP][UTILITY_R][SKILL_E] [FRAME] [SKILL_UP][BOTTOM_B][SKILL_E] [LEVEL_UP][BOTTOM_R][2] [SKILL_UP][BOTTOM_R][SKILL_W] [LEVEL_UP][MIDDLE_B][4] [LEVEL_UP][JUNGLE_B][4] [SKILL_UP][MIDDLE_B][SKILL_Q] [LEVEL_UP][MIDDLE_R][4] [SKILL_UP][MIDDLE_R][SKILL_W] [LEVEL_UP][TOP_B][4] [SKILL_UP][TOP_B][SKILL_Q] [SKILL_UP][JUNGLE_B][SKILL_E] [LEVEL_UP][JUNGLE_R][4] [LEVEL_UP][BOTTOM_B][3] [LEVEL_UP][UTILITY_B][3] [SKILL_UP][JUNGLE_R][SKILL_W] [SKILL_UP][BOTTOM_B][SKILL_W] [LEVEL_UP][TOP_R][4] [SKILL_UP][TOP_R][SKILL_Q] [SKILL_UP][UTILITY_B][SKILL_E] [ITEM_USE][MIDDLE_R][HEALTH_POTION] [WARD_PLACE][PNone][YELLOW] [FRAME] [ITEM_USE][BOTTOM_B][HEALTH_POTION] [ITEM_USE][MIDDLE_B][HEALTH_POTION] [WARD_PLACE][PNone][YELLOW] [LEVEL_UP][BOTTOM_R][3] [LEVEL_UP][MIDDLE_B][5] [SKILL_UP][MIDDLE_B][SKILL_Q] [SKILL_UP][BOTTOM_R][SKILL_E] [WARD_PLACE][PNone][UNDEFINED] [LEVEL_UP][TOP_B][5] [ITEM_BUY][JUNGLE_R][GIANTS_BELT] [SKILL_UP][TOP_B][SKILL_Q] [LEVEL_UP][MIDDLE_R][5] [LEVEL_UP][UTILITY_R][4] [SKILL_UP][MIDDLE_R][SKILL_W] [SKILL_UP][UTILITY_R][SKILL_Q] [LEVEL_UP][TOP_R][5] [WARD_PLACE][PNone][YELLOW] [WARD_PLACE][PNone][YELLOW] [ITEM_USE][MIDDLE_B][HEALTH_POTION] [SKILL_UP][TOP_R][SKILL_Q] [KILL][BOTTOM_R][MIDDLE_B] [ASSIST] [JUNGLE_R] [MIDDLE_R] [BOUNTY][300] [LEVEL_UP][BOTTOM_B][4] [LEVEL_UP][UTILITY_B][4] [ITEM_BUY][TOP_R][FIENDISH_CODEX] [SKILL_UP][BOTTOM_B][SKILL_Q] [SKILL_UP][UTILITY_B][SKILL_W] [ITEM_BUY][MIDDLE_B][BAMIS_CINDER] [ITEM_UNDO][MIDDLE_B][BAMIS_CINDER][[EMPTY]] [ITEM_BUY][MIDDLE_B][NULL_MAGIC_MANTLE] [ITEM_BUY][MIDDLE_B][DARK_SEAL] [WARD_PLACE][PNone][UNDEFINED] [ITEM_BUY][JUNGLE_B][SERRATED_DIRK] [ITEM_BUY][MIDDLE_B][BOOTS] [FRAME] [BUILDING_PLATE][BOT_LANE][BOTTOM_B] [WARD_PLACE][PNone][YELLOW] [ITEM_BUY][TOP_B][PICKAXE] [LEVEL_UP][BOTTOM_R][4] [SKILL_UP][BOTTOM_R][SKILL_Q] [LEVEL_UP][JUNGLE_B][5] [SKILL_UP][JUNGLE_B][SKILL_Q] [LEVEL_UP][MIDDLE_R][6] [SKILL_UP][MIDDLE_R][SKILL_R] [WARD_PLACE][PNone][UNDEFINED] [ITEM_BUY][MIDDLE_R][LOST_CHAPTER] [ITEM_BUY][MIDDLE_R][CONTROL_WARD] [ITEM_BUY][MIDDLE_R][HEALTH_POTION] [LEVEL_UP][JUNGLE_R][5] [LEVEL_UP][TOP_B][6] [WARD_PLACE][PNone][UNDEFINED] [SKILL_UP][TOP_B][SKILL_R] [SKILL_UP][JUNGLE_R][SKILL_W] [LEVEL_UP][TOP_R][6] [SKILL_UP][TOP_R][SKILL_R] [LEVEL_UP][UTILITY_R][5] [SKILL_UP][UTILITY_R][SKILL_E] [ITEM_USE][MIDDLE_R][CONTROL_WARD] [WARD_PLACE][PNone][CONTROL] [WARD_PLACE][PNone][YELLOW] [FRAME] [LEVEL_UP][BOTTOM_B][5] [WARD_PLACE][PNone][UNDEFINED] [SKILL_UP][BOTTOM_B][SKILL_Q] [LEVEL_UP][MIDDLE_B][6] [SKILL_UP][MIDDLE_B][SKILL_R] [ITEM_USE][TOP_B][HEALTH_POTION] [WARD_PLACE][PNone][YELLOW] [ITEM_USE][MIDDLE_R][HEALTH_POTION] [LEVEL_UP][UTILITY_B][5] [WARD_KILL][JUNGLE_B][CONTROL] [SKILL_UP][UTILITY_B][SKILL_E] [LEVEL_UP][MIDDLE_R][7] [LEVEL_UP][JUNGLE_B][6] [SKILL_UP][JUNGLE_B][SKILL_R] [WARD_PLACE][PNone][YELLOW] [SKILL_UP][MIDDLE_R][SKILL_Q] [LEVEL_UP][BOTTOM_R][5] [SKILL_UP][BOTTOM_R][SKILL_Q] [LEVEL_UP][TOP_B][7] [WARD_PLACE][PNone][YELLOW] [SKILL_UP][TOP_B][SKILL_Q] [BUILDING_PLATE][BOT_LANE][BOTTOM_B] [FRAME] [WARD_PLACE][PNone][YELLOW] [KILL][MIDDLE_R][MIDDLE_B] [BOUNTY][268] [WARD_PLACE][PNone][UNDEFINED] [LEVEL_UP][JUNGLE_R][6] [ITEM_USE][MIDDLE_B][BOOTS] [ITEM_USE][MIDDLE_B][NULL_MAGIC_MANTLE] [ITEM_BUY][MIDDLE_B][MERCURYS_TREADS] [LEVEL_UP][BOTTOM_B][6] [SKILL_UP][BOTTOM_B][SKILL_R] [KILL][JUNGLE_B][TOP_R] [BOUNTY][300] [WARD_PLACE][PNone][UNDEFINED] [SKILL_UP][JUNGLE_R][SKILL_R] [KILL][TOP_R][JUNGLE_B] [BOUNTY][300] [LEVEL_UP][TOP_R][7] [SKILL_UP][TOP_R][SKILL_Q] [ITEM_BUY][MIDDLE_R][AMPLIFYING_TOME] [ITEM_BUY][MIDDLE_R][BOOTS] [ITEM_BUY][MIDDLE_R][CONTROL_WARD] [ITEM_BUY][MIDDLE_R][HEALTH_POTION] [ITEM_USE][UTILITY_B][WORLD_ATLAS] [ITEM_BUY][TOP_R][AETHER_WISP] [WARD_PLACE][PNone][YELLOW] [BUILDING_PLATE][TOP_LANE][TOP_B] [WARD_PLACE][PNone][SIGHT] [ITEM_BUY][JUNGLE_B][CAULFIELDS_WARHAMMER] [KILL][JUNGLE_R][TOP_B] [BOUNTY][310] [ITEM_USE][TOP_B][PICKAXE] [ITEM_BUY][TOP_B][THE_BRUTALIZER] [LEVEL_UP][MIDDLE_B][7] [SKILL_UP][MIDDLE_B][SKILL_Q] [ITEM_BUY][UTILITY_R][REJUVENATION_BEAD] [ITEM_BUY][TOP_B][REFILLABLE_POTION] [ITEM_BUY][UTILITY_R][CLOTH_ARMOR] [ITEM_BUY][UTILITY_R][GLOWING_MOTE] [ITEM_BUY][BOTTOM_R][RECTRIX] [WARD_PLACE][PNone][YELLOW] [ITEM_BUY][BOTTOM_R][PICKAXE] [ITEM_BUY][UTILITY_R][FAERIE_CHARM] [ITEM_BUY][BOTTOM_R][DAGGER] [ITEM_BUY][BOTTOM_B][PICKAXE] [ITEM_USE][BOTTOM_B][LONG_SWORD] [ITEM_USE][BOTTOM_B][LONG_SWORD] [ITEM_BUY][BOTTOM_B][SERRATED_DIRK] [ITEM_BUY][UTILITY_B][AMPLIFYING_TOME] [ITEM_BUY][UTILITY_B][AMPLIFYING_TOME] [ITEM_BUY][BOTTOM_B][BOOTS] [ITEM_BUY][BOTTOM_B][DAGGER] [ITEM_USE][MIDDLE_R][CONTROL_WARD] [WARD_PLACE][PNone][CONTROL] [FRAME] "
    # e.g.  "[RANK_EMERALD] [GAME_START] [FRAME]",
]

# Device
DEVICE = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Load tokenizer and model
tokenizer = PreTrainedTokenizerFast.from_pretrained(TOKENIZER_PATH)
model = GPTNeoXForCausalLM.from_pretrained(MODEL_PATH).to(DEVICE).eval()

# Helper: token splitting
def custom_split(text):
    return [tok for tok in re.split(r"(\[[^\[\]]+?\])|\s+", text) if tok and tok.strip()]

# Generation function
def generate(prompt, max_new_tokens=4000):
    full_prompt = "[BOS] " + prompt
    input_ids = tokenizer(full_prompt, return_tensors="pt").input_ids.to(DEVICE)

    with torch.no_grad():
        output = model.generate(
            input_ids,
            max_new_tokens=max_new_tokens,
            do_sample=True,
            top_p=0.9,
            temperature=1.0,
            pad_token_id=tokenizer.pad_token_id,
            eos_token_id=tokenizer.eos_token_id
        )

    generated_ids = output[0][input_ids.shape[1]:]
    generated_text = tokenizer.decode(generated_ids, skip_special_tokens=False)
    tokens = [tok for tok in custom_split(generated_text) if tok not in ("[PAD]", "[UNK]")]
    return tokens

# Run and save output
with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
    for i, prompt in enumerate(PROMPTS):
        f.write(f"--- Sample {i+1} ---\n")
        f.write(f"Prompt: {prompt}\n")
        tokens = generate(prompt)

        if tokens:
            f.write("Generated Tokens:\n")
            f.write(" ".join(tokens) + "\n")
        else:
            f.write("No generation beyond the prompt.\n")

        f.write("\n")

print(f"Done. Results saved to {OUTPUT_FILE}")
